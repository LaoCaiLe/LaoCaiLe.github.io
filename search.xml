<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ubuntu 网络不自动获取IP</title>
      <link href="/2024/04/27/ubuntu_auto_dhcp/"/>
      <url>/2024/04/27/ubuntu_auto_dhcp/</url>
      
        <content type="html"><![CDATA[<p><strong>问题现象</strong><br>ubuntu每次启动后都要执行 sudo dhclient ens33(网络设备名) 网络才能正常。<br>dhclient 是一个动态主机配置协议（DHCP）的客户端程序，它自动配置网络接口的IP地址和其他相关网络设置。</p><p><strong>解决办法</strong><br>执行 sudo vi &#x2F;etc&#x2F;network&#x2F;interfaces，添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auto ens33</span><br><span class="line">iface ens33 inet dhcp</span><br></pre></td></tr></table></figure><p>本机的网络设备名可以通过ifconfig命令查看<br><img src="/images/ubuntu_auto_dhcp/img_20240414021348_2.png" alt="Img"></p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu_base 构建ubuntu根文件系统问题总结</title>
      <link href="/2024/04/17/ubuntu_base_problem/"/>
      <url>/2024/04/17/ubuntu_base_problem/</url>
      
        <content type="html"><![CDATA[<h2 id="apt-update时，在tmp目录下无法创建文件"><a href="#apt-update时，在tmp目录下无法创建文件" class="headerlink" title="apt update时，在tmp目录下无法创建文件"></a>apt update时，在tmp目录下无法创建文件</h2><p><img src="/images/ubuntu_base_problem/img_20240427143249_6.png" alt="Img"><br>解决方法：更改tmp目录权限<br> <code>chmod 777 /tmp</code> </p><h2 id="apt-update时，source-源无法获取certificates"><a href="#apt-update时，source-源无法获取certificates" class="headerlink" title="apt update时，source 源无法获取certificates"></a>apt update时，source 源无法获取certificates</h2><p><img src="/images/ubuntu_base_problem/img_20240427143317_7.png" alt="Img"><br>解决方法：<br><code>apt-get install ca-certificates</code><br>若还是安装失败，可先将源切换回ubuntu原始源，再安装ca-certificates</p><h2 id="起机后sudo命令不可用"><a href="#起机后sudo命令不可用" class="headerlink" title="起机后sudo命令不可用"></a>起机后sudo命令不可用</h2><p><img src="/images/ubuntu_base_problem/img_20240427143417_8.png" alt="Img"><br><img src="/images/ubuntu_base_problem/img_20240427143419_9.png" alt="Img"><br>解决方法：修改root相关文件所有者<br><code>chown root:root /etc/sudoers</code><br><code>chown root:root /usr/bin/sudo</code><br><code>chown -R root /usr/lib/sudo</code><br><code>chmod 4755 /usr/bin/sudo</code><br><code>chown root:root /usr/lib/sudo/sudoers.so</code></p><p><img src="/images/ubuntu_base_problem/img_20240427143445_10.png" alt="Img"><br>解决方法：修改根路径权限<br><code>chmod 0755 / </code> </p><h2 id="su失败"><a href="#su失败" class="headerlink" title="su失败"></a>su失败</h2><p><img src="/images/ubuntu_base_problem/img_20240427143503_11.png" alt="Img"><br>解决方法：修改&#x2F;bin&#x2F;su权限<br><code>chown -R root:root /bin/su</code><br><code>chmod u+s /bin/su</code></p><h2 id="ssh连接时间长"><a href="#ssh连接时间长" class="headerlink" title="ssh连接时间长"></a>ssh连接时间长</h2><p><img src="/images/ubuntu_base_problem/img_20240427143533_12.png" alt="Img"><br>此错误信息表明 .Xauthority 文件时遇到了超时问题，这通常是由于文件被锁定造成的。.Xauthority 文件是用来存储运行 X 会话的用户授权信息的。这个问题可能是由文件权限错误、磁盘空间不足，或者是由于之前的 X 会话异常退出而文件锁定没有被正确清除导致的。</p><p>解决方法：重新构建.Xauthority</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rm /home/$USER/.Xauthority-*</span><br><span class="line">sudo chown $USER:$USER /home/$USER/.Xauthority</span><br><span class="line">chmod 600 /home/$USER/.Xauthority</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux_board </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++ 同名成员函数处理</title>
      <link href="/2024/04/01/deal_with_same_func_in_class/"/>
      <url>/2024/04/01/deal_with_same_func_in_class/</url>
      
        <content type="html"><![CDATA[<p>在类中继承时，如果父类和子类含有同名的成员函数和成员变量，应该按如下规则调用</p><h3 id="同名普通成员普通函数"><a href="#同名普通成员普通函数" class="headerlink" title="同名普通成员普通函数"></a>同名普通成员普通函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">class Father</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    Father()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void func()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;run father func() &quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    void func(int a)</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;run father func(int a)  &quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    int m_a=100;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class son :public Father</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    son()</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    void func()</span><br><span class="line">    &#123;</span><br><span class="line">        cout&lt;&lt;&quot;run son func() &quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    int m_a=200;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void test()</span><br><span class="line">&#123;</span><br><span class="line">    son P;</span><br><span class="line"></span><br><span class="line">    // 执行同名非静态变量</span><br><span class="line">    cout &lt;&lt; &quot;son.p= &quot; &lt;&lt; P.m_a &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;Father.p= &quot; &lt;&lt; P.Father::m_a &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    // 执行同名成员函数</span><br><span class="line">    P.func();</span><br><span class="line">    P.Father::func();</span><br><span class="line"></span><br><span class="line">    // P.func(100); //报错 父类的func(int a) 函数被隐藏</span><br><span class="line">    P.Father::func(123);</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">执行结果</span><br><span class="line">son.p= 200</span><br><span class="line">Father.p= 100</span><br><span class="line">son - func() run</span><br><span class="line">Father - func() run</span><br><span class="line">father - func(int a) run</span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，需要加作用域才可以访问到父类中同名函数</li></ol></blockquote><h3 id="同名静态成员静态函数"><a href="#同名静态成员静态函数" class="headerlink" title="同名静态成员静态函数"></a>同名静态成员静态函数</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">class Base &#123;</span><br><span class="line">public:</span><br><span class="line">static void func()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;Base - static void func()&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">static void func(int a)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;Base - static void func(int a)&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static int m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int Base::m_A = 100;</span><br><span class="line"></span><br><span class="line">class Son : public Base &#123;</span><br><span class="line">public:</span><br><span class="line">static void func()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;Son - static void func()&quot; &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">static int m_A;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">int Son::m_A = 200;</span><br><span class="line"></span><br><span class="line">//同名成员属性</span><br><span class="line">void test01()</span><br><span class="line">&#123;</span><br><span class="line">//通过对象访问</span><br><span class="line">Son s;</span><br><span class="line">cout &lt;&lt; &quot;Son  下 m_A = &quot; &lt;&lt; s.m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;Base 下 m_A = &quot; &lt;&lt; s.Base::m_A &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;-------------&quot; &lt;&lt; endl;</span><br><span class="line">    </span><br><span class="line">    //通过类名访问</span><br><span class="line">cout &lt;&lt; &quot;Son  下 m_A = &quot; &lt;&lt; Son::m_A &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;Base 下 m_A = &quot; &lt;&lt; Son::Base::m_A &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">/*</span><br><span class="line">Son  下 m_A = 200</span><br><span class="line">Base 下 m_A = 100</span><br><span class="line">-------------</span><br><span class="line">Son  下 m_A = 200</span><br><span class="line">Base 下 m_A = 100</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//同名成员函数</span><br><span class="line">void test02()</span><br><span class="line">&#123;</span><br><span class="line">//通过对象访问</span><br><span class="line">cout &lt;&lt; &quot;通过对象访问： &quot; &lt;&lt; endl;</span><br><span class="line">Son s;</span><br><span class="line">s.func();</span><br><span class="line">s.Base::func();</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;通过类名访问： &quot; &lt;&lt; endl;</span><br><span class="line">Son::func();</span><br><span class="line">Son::Base::func();</span><br><span class="line">//出现同名，子类会隐藏掉父类中所有同名成员函数，需要加作作用域访问</span><br><span class="line">Son::Base::func(100);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line">通过对象访问： </span><br><span class="line">Son - static void func()</span><br><span class="line">Base - static void func()</span><br><span class="line">通过类名访问：</span><br><span class="line">Son - static void func()</span><br><span class="line">Base - static void func()</span><br><span class="line">Base - static void func(int a)</span><br><span class="line">*/</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><ol><li>子类对象可以直接访问到子类中同名成员</li><li>子类对象加作用域可以访问到父类同名成员</li><li>当子类与父类拥有同名的成员函数，子类会隐藏父类中同名成员函数，加作用域可以访问到父类中同名函数</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 创建一个服务程序</title>
      <link href="/2024/02/03/create_service/"/>
      <url>/2024/02/03/create_service/</url>
      
        <content type="html"><![CDATA[<ul><li>编写服务单元文件<br>创建一个新的服务单元文件通常在 &#x2F;etc&#x2F;systemd&#x2F;system&#x2F; 目录下，文件扩展名为 .service。例如，你可以创建一个名为 my_service.service 的文件。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=My custom service #描述服务的简短描述</span><br><span class="line">After=network.target    # 定义服务启动顺序</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple            # 服务类型，可以是 simple、forking、oneshot 等</span><br><span class="line">ExecStart=/path/to/your_executable      # 启动服务的命令</span><br><span class="line">Restart=always         # 服务退出时是否自动重启</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target   # 指定服务启动时机</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><strong>启动服务</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl start my_service.service</span><br></pre></td></tr></table></figure><ul><li><strong>设置服务为开机自启动</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl enable my_service.service</span><br></pre></td></tr></table></figure><ul><li><strong>检查服务状态</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl status my_service.service</span><br></pre></td></tr></table></figure><ul><li><strong>停止和禁用服务</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl stop my_service.service</span><br><span class="line">sudo systemctl disable my_service.service</span><br></pre></td></tr></table></figure><ul><li><strong>查询服务</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl list-units --type=service</span><br><span class="line">sudo systemctl list-units --type=service --state=running</span><br><span class="line">sudo systemctl list-unit-files --type=service --state=enabled</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux_board </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell 自动配置Android SElinux权限</title>
      <link href="/2024/02/03/shell_deal_with_selinux_log/"/>
      <url>/2024/02/03/shell_deal_with_selinux_log/</url>
      
        <content type="html"><![CDATA[<h2 id="脚本功能"><a href="#脚本功能" class="headerlink" title="脚本功能"></a>脚本功能</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">log</span>文件[input_log.txt]：</span><br><span class="line"><span class="number">05</span><span class="number">-22</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">36.164</span>  <span class="number">2696</span>  <span class="number">2696</span> I light@<span class="number">2.0</span>-servi: type=<span class="number">1400</span> audit(<span class="number">0.0</span>:<span class="number">21</span>): avc: denied &#123; read write &#125; <span class="keyword">for</span> name=<span class="string">&quot;mik!tsensor&quot;</span> dev=<span class="string">&quot;tmpfs&quot;</span> ino=<span class="number">7764</span> scontext=u:r:hal_light_mstar:s0 tcontext=u:object_r:sensors_device:s0 tclass=chr_file permissive=<span class="number">1</span></span><br><span class="line"><span class="number">05</span><span class="number">-22</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">36.168</span>  <span class="number">2696</span>  <span class="number">2696</span> I light@<span class="number">2.0</span>-servi: type=<span class="number">1400</span> audit(<span class="number">0.0</span>:<span class="number">22</span>): avc: denied &#123; open &#125; <span class="keyword">for</span> path=<span class="string">&quot;/dev/mik!tsensor&quot;</span> dev=<span class="string">&quot;tmpfs&quot;</span> ino=<span class="number">7764</span> scontext=u:r:hal_light_mstar:s0 tcontext=u:object_r:sensors_device:s0 tclass=chr_file permissive=<span class="number">1</span></span><br><span class="line"><span class="number">05</span><span class="number">-22</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">36.168</span>  <span class="number">2696</span>  <span class="number">2696</span> I light@<span class="number">2.0</span>-servi: type=<span class="number">1400</span> audit(<span class="number">0.0</span>:<span class="number">23</span>): avc: denied &#123; ioctl &#125; <span class="keyword">for</span> path=<span class="string">&quot;/dev/mik!tsensor&quot;</span> dev=<span class="string">&quot;tmpfs&quot;</span> ino=<span class="number">7764</span> ioctlcmd=<span class="number">0x2400</span> scontext=u:r:hal_light_mstar:s0 tcontext=u:object_r:sensors_device:s0 tclass=chr_file permissive=<span class="number">1</span></span><br><span class="line"><span class="number">05</span><span class="number">-22</span> <span class="number">20</span>:<span class="number">00</span>:<span class="number">39.968</span>  <span class="number">3109</span>  <span class="number">3109</span> I anelledsservice: type=<span class="number">1400</span> audit(<span class="number">0.0</span>:<span class="number">24</span>): avc: denied &#123; write &#125; <span class="keyword">for</span> name=<span class="string">&quot;value&quot;</span> dev=<span class="string">&quot;sysfs&quot;</span> ino=<span class="number">2140</span> scontext=u:r:system_app:s0 tcontext=u:object_r:sysfs_led_gpio:s0 tclass=file permissive=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">执行脚本</span><br><span class="line">./make_sepolicy_te_file.sh input_log.txt [output_filename.txt]</span><br><span class="line"></span><br><span class="line">输出文件[output_filename.txt]：</span><br><span class="line">allow hal_light_mstar sensors_device:chr_file &#123; ioctl open read write &#125;;</span><br><span class="line">allowxperm hal_light_mstar sensors_device:chr_file ioctl &#123; <span class="number">0x2400</span> &#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="脚本使用"><a href="#脚本使用" class="headerlink" title="脚本使用"></a>脚本使用</h2><p><strong>logcat | grep avc &gt; &#x2F;data&#x2F;xxx.log</strong> 将权限log信息拷贝到一个文件中</p><p><strong>.&#x2F;make_sepolicy_te_file.sh xxx.log [output.txt]</strong> 执行脚本，并将log文件作为命令行参数，输出文件名命令行参数为可选项</p><p><strong>cat output.txt</strong> 将输出文件的配置项拷贝到对应te文件中</p><h2 id="脚本代码"><a href="#脚本代码" class="headerlink" title="脚本代码"></a>脚本代码</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">input_file=$<span class="number">1</span></span><br><span class="line">output_file=$<span class="number">2</span></span><br><span class="line">temp_file=<span class="string">&quot;temp_file.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -z $input_file ]]; then</span><br><span class="line">    echo <span class="string">&quot;Please provide the input log file as an argument.&quot;</span></span><br><span class="line">    <span class="built_in">exit</span> <span class="number">1</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> [[ -z $output_file ]]; then</span><br><span class="line">    output_file=<span class="string">&#x27;output_policy.txt&#x27;</span></span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">&gt;$output_file</span><br><span class="line">&gt;$temp_file</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> IFS= read -r log_message; <span class="keyword">do</span></span><br><span class="line">    context=$(echo $log_message | grep -o <span class="string">&#x27;scontext=[^ ]\+&#x27;</span> | cut -d<span class="number">&#x27;</span>=<span class="string">&#x27; -f2  | cut -d&#x27;</span>:<span class="string">&#x27; -f3)</span></span><br><span class="line"><span class="string">    tclass=$(echo $log_message | grep -o &#x27;</span>tclass=[^ ]\+<span class="string">&#x27; | cut -d&#x27;</span>=<span class="string">&#x27; -f2 | cut -d&#x27;</span>:<span class="string">&#x27; -f2)</span></span><br><span class="line"><span class="string">    file_operation=$(echo &quot;$log_message&quot; | awk -F&#x27;</span>[&#123;&#125;]<span class="string">&#x27; &#x27;</span>&#123;print $<span class="number">2</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    file_type=$(echo $log_message | grep -o &#x27;</span>tcontext=[^ ]\+<span class="string">&#x27; | cut -d&#x27;</span>=<span class="string">&#x27; -f2 | cut -d&#x27;</span>:<span class="string">&#x27; -f3)</span></span><br><span class="line"><span class="string">    ioctlcmd=$(echo $log_message | grep -o &#x27;</span>ioctlcmd=[^ ]\+<span class="string">&#x27; | cut -d&#x27;</span>=<span class="string">&#x27; -f2)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    if [[ -n $context &amp;&amp; -n $tclass &amp;&amp; -n $file_type &amp;&amp; -n $file_operation ]]; then</span></span><br><span class="line"><span class="string">        if [[ $file_operation == &quot; ioctl &quot; &amp;&amp; -n $ioctlcmd ]]; then</span></span><br><span class="line"><span class="string">            converted_rule=&quot;allowxperm $context $file_type:$tclass ioctl &#123; $ioctlcmd &#125;;&quot;</span></span><br><span class="line"><span class="string">            echo $converted_rule &gt;&gt; $temp_file</span></span><br><span class="line"><span class="string">        fi</span></span><br><span class="line"><span class="string">        converted_rule=&quot;allow $context $file_type:$tclass &#123; $file_operation &#125;;&quot;</span></span><br><span class="line"><span class="string">        echo $converted_rule &gt;&gt; $temp_file</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">done &lt; $input_file</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sort -u $temp_file -o $temp_file</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">while IFS= read -r log_message; do</span></span><br><span class="line"><span class="string">    if [[ -n $prefix ]]; then</span></span><br><span class="line"><span class="string">        prefix_compare=$(echo &quot;$log_message&quot; | awk -F&#x27;</span>&#123;<span class="string">&#x27; &#x27;</span>&#123;print $<span class="number">1</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">        if [[ &quot;$prefix&quot; = &quot;$prefix_compare&quot; ]]; then</span></span><br><span class="line"><span class="string">            file_operation+=&#x27;</span> &#x27;</span><br><span class="line">            file_operation+=$(echo <span class="string">&quot;$log_message&quot;</span> | awk -F<span class="number">&#x27;</span>[&#123;&#125;]<span class="string">&#x27; &#x27;</span>&#123;print $<span class="number">2</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">        else</span></span><br><span class="line"><span class="string">            converted_rule=&quot;$prefix &#123; $file_operation &#125;;&quot;</span></span><br><span class="line"><span class="string">            echo $converted_rule &gt;&gt; $output_file</span></span><br><span class="line"><span class="string">            prefix=$(echo &quot;$log_message&quot; | awk -F&#x27;</span>&#123;<span class="string">&#x27; &#x27;</span>&#123;print $<span class="number">1</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">            file_operation=$(echo &quot;$log_message&quot; | awk -F&#x27;</span>[&#123;&#125;]<span class="string">&#x27; &#x27;</span>&#123;print $<span class="number">2</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">        fi</span></span><br><span class="line"><span class="string">    else</span></span><br><span class="line"><span class="string">        prefix=$(echo &quot;$log_message&quot; | awk -F&#x27;</span>&#123;<span class="string">&#x27; &#x27;</span>&#123;print $<span class="number">1</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">        file_operation=$(echo &quot;$log_message&quot; | awk -F&#x27;</span>[&#123;&#125;]<span class="string">&#x27; &#x27;</span>&#123;print $<span class="number">2</span>&#125;<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">    fi</span></span><br><span class="line"><span class="string">done &lt; $temp_file</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">converted_rule=&quot;$prefix &#123; $file_operation &#125;;&quot;</span></span><br><span class="line"><span class="string">echo $converted_rule &gt;&gt; $output_file</span></span><br><span class="line"><span class="string">rm $temp_file</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">sync</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Android </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu根文件系统自动登录</title>
      <link href="/2024/02/03/ubuntu_rootfs_auto_login/"/>
      <url>/2024/02/03/ubuntu_rootfs_auto_login/</url>
      
        <content type="html"><![CDATA[<p>添加ubuntu系统后，每次登录都要输入用户密码，本文编写如何自动登录root<br><img src="/images/ubuntu_rootfs_auto_login/img_20240427142520_5.png" alt="Img"></p><h1 id="串口终端自动登录"><a href="#串口终端自动登录" class="headerlink" title="串口终端自动登录"></a>串口终端自动登录</h1><p>修改 <code>/lib/systemd/system/serial-getty@.service</code><br>注释 <code>ExecStart=-/sbin/agetty -o &#39;-p -- \\u&#39; --keep-baud 115200,57600,38400,9600 %I $TERM</code><br>添加 <code>ExecStart=-/sbin/agetty --autologin root --noclear %I $TERM</code><br><img src="/images/ubuntu_rootfs_auto_login/img_20240427140948_1.png" alt="Img"></p><h1 id="tty终端设置自动登录"><a href="#tty终端设置自动登录" class="headerlink" title="tty终端设置自动登录"></a>tty终端设置自动登录</h1><h2 id="设置所有tty设备"><a href="#设置所有tty设备" class="headerlink" title="设置所有tty设备"></a>设置所有tty设备</h2><p>修改 <code>/lib/systemd/system/getty@.service</code><br>注释 <code>ExecStart=-/sbin/agetty -o &#39;-p -- \\u&#39; --noclear %I $TERM</code><br>添加 <code>ExecStart=-/sbin/agetty --autologin root --noclear %I $TERM</code><br><img src="/images/ubuntu_rootfs_auto_login/img_20240427141332_2.png" alt="Img"></p><h2 id="单独指定某个tty设备"><a href="#单独指定某个tty设备" class="headerlink" title="单独指定某个tty设备"></a>单独指定某个tty设备</h2><p>以添加tty1设备为例<br>在<code>/lib/systemd/system/</code>添加一个新的服务<code>getty@tty1.service</code>，添加以下内容</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Service]</span><br><span class="line">ExecStart=</span><br><span class="line">ExecStart=-/sbin/agetty --autologin root --noclear %I $TERM</span><br></pre></td></tr></table></figure><h1 id="ubuntu-桌面环境自动登录-xfce"><a href="#ubuntu-桌面环境自动登录-xfce" class="headerlink" title="ubuntu 桌面环境自动登录(xfce)"></a>ubuntu 桌面环境自动登录(xfce)</h1><p>ubuntu桌面系统设置允许root登录需要修改很多东西，这里以登录普通用户为例<br>桌面环境相关配置文件如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">usr/share/lightdm/lightdm.conf.d/</span><br><span class="line">etc/xdg/lightdm/lightdm.conf.d/</span><br><span class="line">etc/lightdm/lightdm.conf</span><br></pre></td></tr></table></figure><p>设置自动登录可在<code>usr/share/lightdm/lightdm.conf.d/</code>下添加相关配置<br>打开60-xubuntu.conf，添加<code>autologin-user=&lt;username&gt;</code> 即可<br><img src="/images/ubuntu_rootfs_auto_login/img_20240427142204_4.png" alt="Img"></p>]]></content>
      
      
      <categories>
          
          <category> Linux_board </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git 高效命令</title>
      <link href="/2024/02/01/git_command/"/>
      <url>/2024/02/01/git_command/</url>
      
        <content type="html"><![CDATA[<h2 id="git-log"><a href="#git-log" class="headerlink" title="git log"></a>git log</h2><ul><li>git log  –pretty&#x3D;oneline –abbrev-commit –graph  适合视觉化地理解复杂的分支和合并操作</li><li>git log &lt;file&gt; 可以查看指定文件的提交历史记录，包括该文件的修改情况。</li><li>git log –author&#x3D;&lt;author&gt; 可以查看某个作者的提交历史记录。</li><li>git log –since&#x3D;&lt;date&gt; –until&#x3D;&lt;date&gt; 可以查看某个时间范围内的提交历史记录。</li></ul><h2 id="git-apply"><a href="#git-apply" class="headerlink" title="git apply"></a>git apply</h2><ul><li>git apply –check &lt;patch_file&gt; 检查应用补丁是否会产生冲突，但不实际打入补丁，通常可用在脚本文件做判断</li><li>git apply –cached  &lt;patch_file&gt;    补丁将被应用到暂存区，改动只会在暂存区体现，不会影响工作目录中的文件</li><li>git apply –index  &lt;patch_file&gt;  选项将补丁应用到工作目录和暂存区。它不仅会更新暂存区的内容，也会更新工作目录中的文件。相当于先执行git apply，再执行git add</li><li>git apply –stat  &lt;patch_file&gt; 查看补丁对哪些文件做了修改</li><li>git apply -R  &lt;patch_file&gt; 撤销补丁修改</li></ul><h2 id="git-restore"><a href="#git-restore" class="headerlink" title="git restore"></a>git restore</h2><ul><li>git restore &lt;file&gt;： 撤销对指定文件的更改，并将其恢复为最近一次提交时的状态。</li><li>git restore .   撤销所有未暂存的更改，恢复工作目录中所有文件为最近一次提交时的状态。</li><li>git restore –staged &lt;file&gt; 撤销已add的修改</li><li>git restore –source&#x3D;&lt;commit&gt; &lt;file&gt; 指定恢复的版本</li></ul><h2 id="git-show"><a href="#git-show" class="headerlink" title="git show"></a>git show</h2><ul><li>git show &lt;commit&gt; – &lt;file-path&gt; 查看某个特定提交中的某个文件的修改内容</li><li>git show &lt;commit&gt; –stat: 显示简略的更改统计信息，包括修改的文件数量和行数变动。</li><li>git show &lt;commit&gt; –name-only: 仅显示修改过的文件名，不显示具体更改内容。</li><li>git show &lt;commit&gt; –name-status: 显示修改过的文件名以及修改状态（新增、修改、删除等）。</li><li>git show &lt;commit&gt;:path&#x2F;to&#x2F;file 查看特定文件的变动</li></ul><h2 id="git-checkout"><a href="#git-checkout" class="headerlink" title="git checkout"></a>git checkout</h2><ul><li>git checkout &lt;branch&gt;  切换分支</li><li>git checkout &lt;commit&gt;  回退指定的版本</li><li>git checkout &lt;commit&gt; – &lt;path&gt; 指定路径回退指定的版本</li><li>git checkout – &lt;file&gt; 恢复文件到最近一次提交的状态</li></ul><h2 id="git-blame"><a href="#git-blame" class="headerlink" title="git blame"></a>git blame</h2><ul><li>git blame &lt;file&gt; 查看文件每一行的commit信息，便于追踪代码更改的来源</li><li>git blame -L &lt;start_line&gt; &lt;end_line&gt; &lt;file&gt; 指定哪些行数的commit信息</li></ul><h2 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title="git cherry-pick"></a>git cherry-pick</h2><ul><li>git cherry-pick &lt;commit&gt; 将其他分支的某个commit合入当前分支</li><li>git cherry-pick &lt;commit1&gt;..&lt;commit2&gt;  应用一系列的连续提交，指定范围 [commit1, commit2)</li><li>git cherry-pick &lt;commit1&gt;^..&lt;commit2&gt;  应用一系列的连续提交，指定范围 [commit1, commit2]</li></ul><h2 id="git-stash"><a href="#git-stash" class="headerlink" title="git stash"></a>git stash</h2><ul><li>git stash  将当前工作目录中的所有未暂存的更改保存到一个栈中。</li><li>git stash push – &lt;path&gt; 将指定路径 &lt;path&gt; 的更改暂存起来。</li><li>git stash push -m &lt;stash message&gt; 使用 -m 选项可以添加暂存时的消息</li><li>git stash list  查看当前保存在栈中的所有暂存。</li><li>git stash apply  恢复最近一次的暂存，但不会将其从栈中移除。</li><li>git stash pop 命令可以恢复并删除最近一次的暂存。</li><li>git stash apply &lt;stash&gt; 可以恢复指定的暂存，其中 &lt;stash&gt; 是暂存的索引或引用。</li><li>git stash drop &lt;stash&gt; 可以删除指定的暂存，其中 &lt;stash&gt; 是暂存的索引或引用</li></ul><h2 id="other"><a href="#other" class="headerlink" title="other"></a>other</h2><ul><li>git reflog 展示 HEAD 指针最近的变化历史</li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello world</title>
      <link href="/2024/01/21/hello-world/"/>
      <url>/2024/01/21/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu .bashrc的妙用</title>
      <link href="/2024/01/17/advance_use_bashrc/"/>
      <url>/2024/01/17/advance_use_bashrc/</url>
      
        <content type="html"><![CDATA[<p>.bashrc 文件是一个脚本文件，当一个用户创建一个新的 bash shell 或者打开一个新的 bash 终端时，它会被执行。这个文件中的命令一般是用于初始化用户环境，例如设置环境变量，定义命令别名以及其他各种任务。</p><h2 id="设置命令自动补全"><a href="#设置命令自动补全" class="headerlink" title="设置命令自动补全"></a>设置命令自动补全</h2><ul><li>让 Linux 终端的 Tab 补全功能在自动判断时忽略大小写，在 <strong>.bashrc</strong> 末尾添加</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bind &#x27;set completion-ignore-case on&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="给命令起别名"><a href="#给命令起别名" class="headerlink" title="给命令起别名"></a>给命令起别名</h2><ul><li>alias 命令在 .bashrc 文件中为常用的长命令定义简短的别名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">alias la=&#x27;ls -lah&#x27; </span><br><span class="line">// 将使得每次输入 la，都会执行 ls -lah。</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/images/advance_use_bashrc/img_20240427131533_3.png" alt="Img"></p><h2 id="添加命令函数"><a href="#添加命令函数" class="headerlink" title="添加命令函数"></a>添加命令函数</h2><ul><li>用过svn的开发人员就知道，svn没有git clean -xdf的对应清零工程命令，svn清理工程需要执行 <code> svn status | grep &quot;^?&quot; | awk &quot;&#123;print \$2&#125;&quot; | xargs rm -rf;</code> 这一长串命令，对于开发人员不是很方便，这时候可以将这条命令作为函数写入 .bashrc 中，然后执行函数名就可相应执行命令。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">svn_clean() &#123;</span><br><span class="line">  svn status | grep &quot;^?&quot; | awk &quot;&#123;print \$2&#125;&quot; | xargs rm -rf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>对于一些命令需要灵活的带入一些参数，我们可以用带参数的方式实现函数</li></ul><p>例如这条命令可以根据 -name参数和 grep参数从子目录获取符合条件的某一行并打印出结果。<br><img src="/images/advance_use_bashrc/img_20240427131046_1.png" alt="Img"></p><p>但是我们一般很难记住这样的命令，这时就可以借助bashrc添加函数实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eval_find() &#123;</span><br><span class="line">  name=$1</span><br><span class="line">  key=$2</span><br><span class="line">  parm=$3</span><br><span class="line">  eval &quot;$(find -type f -name &quot;$name&quot; | sed -n &#x27;s|.*|grep &quot;$key&quot; $parm -in &amp; \&amp;\&amp; echo &quot; -&gt;&quot; &amp; &quot;\n&quot;|p&#x27;)&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/advance_use_bashrc/img_20240427131419_2.png" alt="Img"></p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux开发板添加lcd屏幕作为终端界面</title>
      <link href="/2024/01/12/Linux_add_lcd_tty/"/>
      <url>/2024/01/12/Linux_add_lcd_tty/</url>
      
        <content type="html"><![CDATA[<p>本文wukongpi开发板全志H3芯片，lcd以st7789为例</p><h2 id="kernel设置"><a href="#kernel设置" class="headerlink" title="kernel设置"></a>kernel设置</h2><p>在menuconfig中打开fbtft开关，在kernel根目录下执行<code>make menuconfig</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">└─&gt;Device Drivers</span><br><span class="line">    └─&gt;Staging drivers</span><br><span class="line">        └─&gt;Support for small TFT LCD display modules</span><br><span class="line">            └─&gt; FB driver for the ST7789V LCD Controller</span><br></pre></td></tr></table></figure><p><img src="/images/Linux_add_lcd_tty/img_20240427150529_13.png" alt="Img"><br>相关驱动源代码在 <code>drivers\staging\fbtft\fb_st7789v.c</code>，感兴趣可自行查看</p><h2 id="设备树配置"><a href="#设备树配置" class="headerlink" title="设备树配置"></a>设备树配置</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&amp;spi1 &#123;</span><br><span class="line">status = &quot;okay&quot;;</span><br><span class="line">pinctrl-names = &quot;default&quot;;</span><br><span class="line">pinctrl-0 = &lt;&amp;spi1_pins&gt;;</span><br><span class="line">cs-gpios = &lt;&amp;pio 0 13 GPIO_ACTIVE_LOW&gt;; /* PA13 */</span><br><span class="line">#address-cells = &lt;1&gt;;</span><br><span class="line">#size-cells = &lt;0&gt;;</span><br><span class="line">spilcd@0 &#123;</span><br><span class="line">compatible = &quot;sitronix,st7789v&quot;;</span><br><span class="line">reg = &lt;0&gt;;</span><br><span class="line">spi-max-frequency = &lt;32000000&gt;;</span><br><span class="line">fps = &lt;60&gt;;</span><br><span class="line">buswidth = &lt;8&gt;;</span><br><span class="line">reset-gpios = &lt;&amp;pio 0 0 GPIO_ACTIVE_HIGH&gt;; /* PA0 */</span><br><span class="line">dc-gpios = &lt;&amp;pio 0 1 GPIO_ACTIVE_HIGH&gt;; /* PA1 */</span><br><span class="line">blk-gpios = &lt;&amp;pio 0 6 GPIO_ACTIVE_HIGH&gt;; /* PA6 */</span><br><span class="line">pinctrl-names = &quot;default&quot;;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>由于lcd通过spi协议通信，在这里用H3的spi1外设<br>spi1_pins已在芯片相关设备树头文件中定义，硬件接口如clk，mosi接口就要使用spi1的接口<br>compatible &#x3D; “sitronix,st7789v”，”sitronix,st7789v”在drivers\staging\fbtft\fb_st7789v.c中定义<br>其他接口可自行配置，在本例中设置 reset-PA0，dc-PA1，blk-PA6，cs-PA13</p><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><p>kernel配置和设备树配置完后，就可编译kernel镜像和设备树文件。<br>之后在bootargs中设置添加<code>console=tty1</code>即可。</p>]]></content>
      
      
      <categories>
          
          <category> Linux_board </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>nmcli命令连接wifi</title>
      <link href="/2023/12/21/Linux_connect_wifi/"/>
      <url>/2023/12/21/Linux_connect_wifi/</url>
      
        <content type="html"><![CDATA[<h1 id="列出wifi列表"><a href="#列出wifi列表" class="headerlink" title="列出wifi列表"></a>列出wifi列表</h1><p>nmcli dev wifi list<br><img src="/images/Linux_connect_wifi/img_20240427153159_14.png" alt="Img"></p><h1 id="连接wifi"><a href="#连接wifi" class="headerlink" title="连接wifi"></a>连接wifi</h1><ul><li><p>第一次连接<br><code>nmcli dev wifi connect \&lt;wifi_name&gt; password \&lt;wifi_passwd&gt; ifname wlan0</code></p></li><li><p>第一次连接成功后，再连接或切换wifi后不用在输入WiFi名<br><code>nmcli dev wifi connect \&lt;wifi_name&gt;</code></p></li></ul><h1 id="断开连接"><a href="#断开连接" class="headerlink" title="断开连接"></a>断开连接</h1><p> nmcli connection down &lt;wifi_name&gt;</p><h1 id="查看网络连接情况"><a href="#查看网络连接情况" class="headerlink" title="查看网络连接情况"></a>查看网络连接情况</h1><p> nmcli -t<br> nmcli -t -f TYPE c show –active<br> nmcli -t -f NAME c show –active<br> <img src="/images/Linux_connect_wifi/img_20240427154057_16.png" alt="Img"></p>]]></content>
      
      
      <categories>
          
          <category> Linux_board </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
